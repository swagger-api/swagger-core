package io.swagger.util.supplier.compiler;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import javax.tools.Diagnostic;
import javax.tools.DiagnosticListener;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.swagger.util.supplier.filer.DirectoryTempHelper;

/**
 * Dynamic java class compiler and executer
 * @author dedece35
 */
public class DynamicCompiler {

    private static Logger LOGGER = LoggerFactory.getLogger(DynamicCompiler.class);

    private static String dirClassPath = "";

    private static boolean dirClassPathInitialized = false;

    /**
     * A DiagnosticListener for compilation errors
     */
    public static class CustomDiagnosticListener implements DiagnosticListener<JavaFileObject> {
        @Override
        public void report(final Diagnostic<? extends JavaFileObject> diagnostic) {
            LOGGER.error("COMPILER - Compilation error diagnostic : ");
            LOGGER.error("COMPILER -    Line Number -> {}", diagnostic.getLineNumber());
            LOGGER.error("COMPILER -    Code -> {}", diagnostic.getCode());
            LOGGER.error("COMPILER -    Message -> {}", diagnostic.getMessage(Locale.ENGLISH));
            LOGGER.error("COMPILER -    Source -> {}", diagnostic.getSource());
        }
    }

    /**
     * Compile source code present in JavaFileObject
     * @return File object representing directory where is output class file generated by compilation
     */
    public static File compile(final JavaFileObject jfo) {

        if (jfo == null) {
            return null;
        }

        // get system compiler
        LOGGER.debug("COMPILER - COMPILING PHASE - Getting and Init System Java Compiler");
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();

        // for compilation diagnostic message processing on compilation WARNING/ERROR
        CustomDiagnosticListener diag = new CustomDiagnosticListener();
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(diag,
                null,
                null);

        // specify classes output folder
        LOGGER.debug("COMPILER - COMPILING PHASE - Creating Temp directory for result compilation");
        File tmpDirClass;
        try {
            tmpDirClass = DirectoryTempHelper.createTmpDir();
        } catch (IOException e) {
            LOGGER.info("COMPILER - COMPILING PHASE - error during creation TempDir : {}", e.getMessage());
            return null;
        }

        // build options for compilation
        LOGGER.debug("COMPILER - COMPILING PHASE - Building compilation options (classpath, ...)");
        List<String> options = new ArrayList<String>();
        options.add("-d");
        options.add(tmpDirClass.getPath());

        if (!dirClassPathInitialized) {
            buildClassPath();
        }
        if (StringUtils.isNotBlank(dirClassPath)) {
            options.add("-classpath");
            options.add(dirClassPath);
        }

        // launch compilation
        LOGGER.debug("COMPILER - COMPILING PHASE - Launching compilation");
        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager,
                diag, options, null,
                Arrays.asList(jfo));
        Boolean result = task.call();

        // compilation result
        if (result == true) {
            LOGGER.info("COMPILER - COMPILING PHASE - Compilation OK");
        } else {
            LOGGER.error("COMPILER - COMPILING PHASE - Compilation NOT OK");
            LOGGER.debug("COMPILER - COMPILING PHASE - Deleting Temp directory (containing result compilation)");
            DirectoryTempHelper.deleteDir(tmpDirClass);
            return null;
        }
        return tmpDirClass;
    }

    /**
     * Build classpath option from system property "wtp.deploy"
     */
    private static void buildClassPath() {
        dirClassPathInitialized = true;

        // getting deploy webapp dir
        String tomcatWebappsDirVar = System.getProperty("wtp.deploy");
        if (StringUtils.isBlank(tomcatWebappsDirVar)) {
            return;
        }

        File tomcatWebappsDir = new File(tomcatWebappsDirVar);
        if (!tomcatWebappsDir.exists() || !tomcatWebappsDir.isDirectory()) {
            return;
        }

        final String webinfClassesDirname = File.separator + "WEB-INF" + File.separator + "classes";
        File[] lstFiles = tomcatWebappsDir.listFiles();
        for (int i = 0; i < lstFiles.length; i++) {
            File file = lstFiles[i];
            if (file.exists() && file.isDirectory()) {
                File webinfClassesDir = new File(file.getPath() + webinfClassesDirname);
                if (webinfClassesDir.exists() && webinfClassesDir.isDirectory()) {
                    if (StringUtils.isNotBlank(dirClassPath)) {
                        dirClassPath += ":";
                    }
                    dirClassPath += webinfClassesDir.getPath();
                }
            }
        }

    }

    /**
     * Execute a method from the compiled byte code
     */
    @SuppressWarnings({ "rawtypes", "resource", "unchecked" })
    public static Object execute(final File classDir, final String fullClassName, final String methodName) {

        // checks
        if (classDir == null || StringUtils.isBlank(fullClassName) || StringUtils.isBlank(methodName)) {
            return null;
        }

        // Create a File object on the root of the directory containing the class file
        Object res = null;
        try {
            LOGGER.debug("COMPILER - RUNNING PHASE - Init classLoader");

            // verify if classpath was already built or not
            if (!dirClassPathInitialized) {
                buildClassPath();
            }

            // Convert compiled class directory to a URL
            URL url = classDir.toURI().toURL();
            // Add compiled class directory and a built classpath directory to urls
            URL[] urls = new URL[] { url };
            if (StringUtils.isNotBlank(dirClassPath)) {
                urls = new URL[] { url, new File(dirClassPath).toURI().toURL() };
            }

            // Create a new class loader with urls
            ClassLoader loader = new URLClassLoader(urls);

            // load class
            LOGGER.debug("COMPILER - RUNNING PHASE - loading class '{}'", fullClassName);
            Class thisClass = loader.loadClass(fullClassName);

            // instanciate class
            LOGGER.debug("COMPILER - RUNNING PHASE - instanciating class '{}'", fullClassName);
            Class params[] = {};
            Object paramsObj[] = {};
            Object instance = thisClass.newInstance();

            // load method
            LOGGER.debug("COMPILER - RUNNING PHASE - invoking method '{}'", methodName);
            Method thisMethod = thisClass.getDeclaredMethod(methodName, params);

            // run method on the instance
            res = thisMethod.invoke(instance, paramsObj);

        } catch (Exception ex) {
            LOGGER.error("COMPILER - RUNNING PHASE - error during execution code : {}", ex.getMessage());
        } finally {
            LOGGER.debug("COMPILER - RUNNING PHASE - Deleting temp dir for class file");
            DirectoryTempHelper.deleteDir(classDir);
        }

        return res;
    }

}
