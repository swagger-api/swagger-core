openapi: 3.0.1
paths:
  /methodWithRequestBodyWithoutContent:
    get:
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: methodWithRequestBodyWithoutContent
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /methodWithRequestBodyWithoutContentWithoutImplementation:
    get:
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: methodWithRequestBodyWithoutContentWithoutImplementation
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              type: string
              description: User description
              example: User Description
        required: true
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /methodWithRequestBodyWithoutAnnotation:
    put:
      summary: Modify user
      description: Modifying user.
      operationId: methodWithRequestBodyWithoutAnnotation
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /methodWithoutRequestBodyAndTwoParameters:
    delete:
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: methodWithoutRequestBodyAndTwoParameters
      parameters:
      - name: name
        in: query
        schema:
          type: string
      - name: code
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /methodWithRequestBodyWithoutAnnotationAndTwoConsumes:
    put:
      summary: Modify pet
      description: Modifying pet.
      operationId: methodWithRequestBodyWithoutAnnotationAndTwoConsumes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /methodWithTwoRequestBodyWithoutAnnotationAndTwoConsumes:
    post:
      summary: Create pet
      description: Creating pet.
      operationId: methodWithTwoRequestBodyWithoutAnnotationAndTwoConsumes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /methodWithTwoRequestBodyWithAnnotationAndTwoConsumes:
    post:
      summary: Create pet
      description: Creating pet.
      operationId: methodWithTwoRequestBodyWithAnnotationAndTwoConsumes
      requestBody:
        description: Request Body User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /methodWithOneSimpleRequestBody:
    delete:
      summary: Delete pet
      description: Deleting pet.
      operationId: methodWithOneSimpleRequestBody
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
          application/xml:
            schema:
              type: integer
              format: int32
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /methodWithRequestBodyAndTwoParameters:
    post:
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: methodWithRequestBodyAndTwoParameters
      parameters:
      - name: name
        in: query
        schema:
          type: string
      - name: code
        in: query
        schema:
          type: string
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: default response
          content:
            '*/*': {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available,pending,sold
      xml:
        name: Pet
